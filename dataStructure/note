----------------------------------------------------------------------------------------
字典树，又称单词查找树，Trie 树，是一种树形结构，是一种哈希树的变种。
典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），
所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，
最大限度地减少无谓的字符串比较，查询效率比哈希树高。



字典树的主要性质
它有 3 个基本性质：

根节点不包含字符，除根节点外每一个节点都只包含一个字符；
从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串；
每个节点的所有子节点包含的字符都不相同。


堆 (heap) 是一种经过排序的完全二叉树，其中任一非叶子节点的值均不大于（或不小于）其左孩子和右孩子节点的值。

注：定义来自百度百科。

堆，又被为优先队列(priority queue)。尽管名为优先队列，但堆并不是队列。

其他概念解释
最大堆 根结点的键值是所有堆结点键值中最大者。

最小堆 根结点的键值是所有堆结点键值中最小者。

----------------------------------------------------------------------------------------
下面就通过一个例子来让大家快速地知道什么是图，如下图所示，G1 是有向图，G2 是无向图，每个数据元素称为顶点，
在有向图中，从 V1 到 V3 称为一条弧，V3 到 V1 为另一条弧，V1 称为弧尾，V3 称为弧头，在无向图中，从 V1 到 V3 称为一条边。图

有 n 个顶点，1/2n(n-1)条边的无向图称为完全图，有 n*(n-1)条弧有向图称为有向完全图，有很少条边或图称为稀疏图，
反之称为稠密图。在 G2 无向图中，类似 V3 与 V1、V2 和 V4 之间有边的互称为邻接点，与顶点相关联的边数称为顶点的度，
例如 V3 顶点的度为 3，而在 G1 有向图中，顶点的度是顶点的出度和入度之和，以顶点为头的弧的数目称为入度，为尾的弧的数目称为出度，
例如 V1 顶点的出度为 2，入度为 1，它的度为 1+2=3。

从一个顶点到另一个顶点的顶点序列称为路径，在有向图中，路径是有方向的，路径上边或弧的数目称为路径的长度，如
果一条路径中的起始顶点跟结束结点相同，那么称这个路径为环或回路，不出现重复顶点的路径称为简单路径。无向图中，如果一个顶点到另一个顶点有路径，
那么它们就是连通的，如果图中的任意两个顶点都是连通的，那么这个图就是连通图，无向图中的极大连通子图称为连通分量，如果是有向图中的任意一对顶点都有路径，
那么这个图就是强连通图，相应的它的极大连通子图就称为强连通分量。一个连通图的一个极小连通子图，它包含所有顶点，但足以构成一棵树的 n-1 条边，
加一条边必定会形成环，这个就称为生成树。

概念介绍
无向图 图是若干个顶点(Vertices)和边(Edges)相互连接组成的。边仅由两个顶点连接，并且没有方向的图称为无向图。

有向图 在有向图中，边是单向的：每条边连接的两个顶点都是一个有序对，它们的邻接性是单向的。我们开发过程中碰到的很多场景都是有向图：
比如任务调度的依赖关系，社交网络的任务关系等等都是天然的有向图。

度 一个顶点的度是指与该顶点相关联的边的条数，顶点 v 的度记作 d(v)。


表示图通常有四种方法：数组表示法、邻接表、十字链表和邻接多重表。邻接表是图的一种链式存储结构，
十字链表是有向图的另一种链式存储结构，邻接多重表是无向图的另一种链式存储结构。这里主要讲解一下邻接表的表示和实现，
邻接表中有两种结点，一种是头结点，另一种是表结点，头结点中存储一个顶点的数据和指向链表中第一个结点，
表结点中存储当前顶点在图中的位置和指向下一条边或弧的结点，表头结点用链式或顺序结构方式存储，如下图所示就是上图 G2 无向图的邻接表表示。

----------------------------------------------------------------------------------------
深度优先搜索(DFS) 是树的先根遍历的推广，它的基本思想是：
从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。
然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。

----------------------------------------------------------------------------------------
广度优先搜索(BFS)是树的按层次遍历的推广，它的基本思想是：
首先访问初始点 vi，并将其标记为已访问过，接着访问 vi 的所有未被访问过的邻接点 vi1,vi2,..., vin，
并均标记已访问过，然后再按照 vi1,vi2,..., vin 的次序，访问每一个顶点的所有未被访问过的邻接点，
并均标记为已访问过，依次类推，直到图中所有和初始点 vi 有路径相通的顶点都被访问过为止。